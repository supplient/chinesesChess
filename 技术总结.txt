#这里很多东西不过是我的自娱自乐，大概不适合放在答辩的PPT上，所以主要还是看你怎么做
#也就是说这个技术总结仅供参考，主要还是参考一下别的组、别的班级之类的去做答辩吧……

1.队列沙漏（Queue Hourglass)
	将消息队列放在栈中，主消息队列置于最下，越是次级的消息队列越是在上面。
	当有新的消息产生的时候，放进栈顶的消息队列中。
	若某消息无法被某个消息队列处理，由该消息队列决定是否将该消息下流至下一个消息队列来进行处理。
	优点：
		处理消息对象的选择被队列沙漏自动化进行。
		允许系统级消息总是能够被处理。
	缺点：
		存在不稳定性，容易发生某次级消息队列中还有消息没有被处理时，它就被pop掉了。

2.传声筒(Sounding Board)
	只能在一时间进行“听、做、说”三件事情中的一件事情的封装socket类。
	虽然使用UDP，但是自身含有连接状态。
	尝试了“一等公民函数”的FP（function programming)思想……不过好像没做好，就不管它了……
	优点：
		简化网络编程的逻辑，使得线程之间的消息处理能够使用队列沙漏，而不至于使用更多更复杂的技术。
	缺点：
		没有认认真真地做好“连接状态”那一部分，在实验室环境运行良好，实际环境中恐怕根本无法动。
		
3.消息头(Signal Head)
	每一个指令消息都含有一个消息头，来区别自己是哪种消息。
	优点：
		便捷、清晰地针对不同类型的消息进行消息处理。
	缺点：
		多了很多逻辑代码，有的时候看起来很冗长……
		
4.主消息处理线程（Main Signal Processing Thread）
	虽然存在次级消息队列，但处理线程只有一个，与消息产生线程是分开的一个独立线程。
	优点：
		使得异常处理不至于因为处理线程有多个而不得不进入线程级别的复杂度。
	缺点：
		无法负荷非常复杂的逻辑……大概也就只能处理处理目前这种一问一答的次级逻辑了……